/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface EscrowInterface extends utils.Interface {
  functions: {
    "amountToWithdraw()": FunctionFragment;
    "approve()": FunctionFragment;
    "arbiter()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "depositor()": FunctionFragment;
    "escrowContractFactory()": FunctionFragment;
    "getArbiter()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getBeneficiary()": FunctionFragment;
    "getDepositor()": FunctionFragment;
    "haveIssue()": FunctionFragment;
    "isApproved()": FunctionFragment;
    "isIssueRaised()": FunctionFragment;
    "issueReason()": FunctionFragment;
    "raiseIssue(string)": FunctionFragment;
    "resolveIssue()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amountToWithdraw"
      | "approve"
      | "arbiter"
      | "beneficiary"
      | "depositor"
      | "escrowContractFactory"
      | "getArbiter"
      | "getBalance"
      | "getBeneficiary"
      | "getDepositor"
      | "haveIssue"
      | "isApproved"
      | "isIssueRaised"
      | "issueReason"
      | "raiseIssue"
      | "resolveIssue"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "amountToWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "approve", values?: undefined): string;
  encodeFunctionData(functionFragment: "arbiter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "depositor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "escrowContractFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArbiter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "haveIssue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isIssueRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueReason",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raiseIssue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveIssue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "amountToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arbiter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowContractFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getArbiter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "haveIssue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIssueRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raiseIssue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveIssue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approved(address,uint256)": EventFragment;
    "IssueRaised(string)": EventFragment;
    "IssueResolved()": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssueRaised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssueResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ApprovedEventObject {
  approver: string;
  amount: BigNumber;
}
export type ApprovedEvent = TypedEvent<
  [string, BigNumber],
  ApprovedEventObject
>;

export type ApprovedEventFilter = TypedEventFilter<ApprovedEvent>;

export interface IssueRaisedEventObject {
  reason: string;
}
export type IssueRaisedEvent = TypedEvent<[string], IssueRaisedEventObject>;

export type IssueRaisedEventFilter = TypedEventFilter<IssueRaisedEvent>;

export interface IssueResolvedEventObject {}
export type IssueResolvedEvent = TypedEvent<[], IssueResolvedEventObject>;

export type IssueResolvedEventFilter = TypedEventFilter<IssueResolvedEvent>;

export interface WithdrawnEventObject {
  beneficiary: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amountToWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arbiter(overrides?: CallOverrides): Promise<[string]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    depositor(overrides?: CallOverrides): Promise<[string]>;

    escrowContractFactory(overrides?: CallOverrides): Promise<[string]>;

    getArbiter(overrides?: CallOverrides): Promise<[string]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    getDepositor(overrides?: CallOverrides): Promise<[string]>;

    haveIssue(overrides?: CallOverrides): Promise<[boolean]>;

    isApproved(overrides?: CallOverrides): Promise<[boolean]>;

    isIssueRaised(overrides?: CallOverrides): Promise<[boolean]>;

    issueReason(overrides?: CallOverrides): Promise<[string]>;

    raiseIssue(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveIssue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  amountToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arbiter(overrides?: CallOverrides): Promise<string>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  depositor(overrides?: CallOverrides): Promise<string>;

  escrowContractFactory(overrides?: CallOverrides): Promise<string>;

  getArbiter(overrides?: CallOverrides): Promise<string>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getBeneficiary(overrides?: CallOverrides): Promise<string>;

  getDepositor(overrides?: CallOverrides): Promise<string>;

  haveIssue(overrides?: CallOverrides): Promise<boolean>;

  isApproved(overrides?: CallOverrides): Promise<boolean>;

  isIssueRaised(overrides?: CallOverrides): Promise<boolean>;

  issueReason(overrides?: CallOverrides): Promise<string>;

  raiseIssue(
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveIssue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    amountToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    approve(overrides?: CallOverrides): Promise<void>;

    arbiter(overrides?: CallOverrides): Promise<string>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    depositor(overrides?: CallOverrides): Promise<string>;

    escrowContractFactory(overrides?: CallOverrides): Promise<string>;

    getArbiter(overrides?: CallOverrides): Promise<string>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBeneficiary(overrides?: CallOverrides): Promise<string>;

    getDepositor(overrides?: CallOverrides): Promise<string>;

    haveIssue(overrides?: CallOverrides): Promise<boolean>;

    isApproved(overrides?: CallOverrides): Promise<boolean>;

    isIssueRaised(overrides?: CallOverrides): Promise<boolean>;

    issueReason(overrides?: CallOverrides): Promise<string>;

    raiseIssue(
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveIssue(overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approved(address,uint256)"(
      approver?: PromiseOrValue<string> | null,
      amount?: null
    ): ApprovedEventFilter;
    Approved(
      approver?: PromiseOrValue<string> | null,
      amount?: null
    ): ApprovedEventFilter;

    "IssueRaised(string)"(reason?: null): IssueRaisedEventFilter;
    IssueRaised(reason?: null): IssueRaisedEventFilter;

    "IssueResolved()"(): IssueResolvedEventFilter;
    IssueResolved(): IssueResolvedEventFilter;

    "Withdrawn(address,uint256)"(
      beneficiary?: null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(beneficiary?: null, amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    amountToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arbiter(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    depositor(overrides?: CallOverrides): Promise<BigNumber>;

    escrowContractFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getArbiter(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositor(overrides?: CallOverrides): Promise<BigNumber>;

    haveIssue(overrides?: CallOverrides): Promise<BigNumber>;

    isApproved(overrides?: CallOverrides): Promise<BigNumber>;

    isIssueRaised(overrides?: CallOverrides): Promise<BigNumber>;

    issueReason(overrides?: CallOverrides): Promise<BigNumber>;

    raiseIssue(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveIssue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amountToWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arbiter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    escrowContractFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArbiter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    haveIssue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApproved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isIssueRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issueReason(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raiseIssue(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveIssue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
